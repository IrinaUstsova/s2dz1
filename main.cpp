/*БД – совокупность подразделений (организация). Класс 1 – образовательные подразделения. Класс 2 – научные
подразделения. Каждое подразделение имеет название, руководителя (ФИО), число аспирантов, число
сотрудников. У научных подразделений указаны проекты (название, стоимость). У образовательных
подразделений указано число студентов и стоимость обучения одного студента, сгруппированные по курсам.
Функции (п. 4):
 Подсчёт похода для подразделения.
 Реализовать поиск подразделения внутри БД по ФИО.
Правила сортировки записей БД (п. 5.10):
 По названию подразделения (по алфавиту).
 По числу сотрудников (по убыванию).
Правила выборки записей из БД (п. 5.11):
 Подразделения, где на каждого сотрудника приходится не меньше number аспирантов (numberзадаётся
с клавиатуры).
 Подразделения, где число студентов (включая аспирантов) не превышает n (n задаётся с клавиатуры).
 Реализовать абстрактный класс, содержащий чистые виртуальные функции,
функционал которых различается для наследников, заданных вариантом и отличающихся
организацией данных (группировкой).
2. Реализовать разбор текстовых команд, введённых с клавиатуры.
3. Разработать формат сохранения БД в файл.
4. Реализовать функции в соответствии с вариантом.
5. Реализовать управление базами данных через интерфейс СУБД:
5.1) Создание однотипных БД и гибридных БД.
5.2) Вывод на экран* списка существующих БД.
5.3) Удаление* БД.
5.4) Переименование* БД.
5.5) Открытие** БД.
5.6) Сохранение** БД.
5.7) Добавление записей в БД.
5.8) Удаление записей в БД.
5.9) Вывод на экран записей БД.
5.10) Сортировка записей БД.
5.11) Выборка записей БД по правилу (подмножество записей).
5.12) Сохранение** выборки как новой БД (по желанию пользователя).
5.13) Редактирование записей в БД (для претендующих на 4 и 5).*/

#include "UserInterface.h"

int main() {
    std::cout << "\t~~~ WELCOME USER !!! ~~~\n";

    UI_init(0);
    while (1) {
        UI_chat();
        UI_init(1);
    }
}